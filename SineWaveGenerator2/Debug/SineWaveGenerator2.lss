
SineWaveGenerator2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000007c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  0000007c  000000f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000f0  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000020  00000000  00000000  00000120  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000000e3  00000000  00000000  00000140  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000a8  00000000  00000000  00000223  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000000c9  00000000  00000000  000002cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000024  00000000  00000000  00000394  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000183  00000000  00000000  000003b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000001f  00000000  00000000  0000053b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  0000055a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	24 c0       	rjmp	.+72     	; 0x4c <__bad_interrupt>
   4:	23 c0       	rjmp	.+70     	; 0x4c <__bad_interrupt>
   6:	22 c0       	rjmp	.+68     	; 0x4c <__bad_interrupt>
   8:	21 c0       	rjmp	.+66     	; 0x4c <__bad_interrupt>
   a:	20 c0       	rjmp	.+64     	; 0x4c <__bad_interrupt>
   c:	1f c0       	rjmp	.+62     	; 0x4c <__bad_interrupt>
   e:	1e c0       	rjmp	.+60     	; 0x4c <__bad_interrupt>
  10:	1d c0       	rjmp	.+58     	; 0x4c <__bad_interrupt>
  12:	1c c0       	rjmp	.+56     	; 0x4c <__bad_interrupt>
  14:	1b c0       	rjmp	.+54     	; 0x4c <__bad_interrupt>
  16:	1a c0       	rjmp	.+52     	; 0x4c <__bad_interrupt>
  18:	19 c0       	rjmp	.+50     	; 0x4c <__bad_interrupt>
  1a:	18 c0       	rjmp	.+48     	; 0x4c <__bad_interrupt>
  1c:	17 c0       	rjmp	.+46     	; 0x4c <__bad_interrupt>
  1e:	16 c0       	rjmp	.+44     	; 0x4c <__bad_interrupt>
  20:	15 c0       	rjmp	.+42     	; 0x4c <__bad_interrupt>
  22:	14 c0       	rjmp	.+40     	; 0x4c <__bad_interrupt>
  24:	13 c0       	rjmp	.+38     	; 0x4c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ec e7       	ldi	r30, 0x7C	; 124
  3a:	f0 e0       	ldi	r31, 0x00	; 0
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a0 36       	cpi	r26, 0x60	; 96
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>
  48:	02 d0       	rcall	.+4      	; 0x4e <main>
  4a:	16 c0       	rjmp	.+44     	; 0x78 <_exit>

0000004c <__bad_interrupt>:
  4c:	d9 cf       	rjmp	.-78     	; 0x0 <__vectors>

0000004e <main>:


int main(void)
{
	// wyjœciem rejestru OCR1A jest PB1
	DDRB |= (1 << DDB1);
  4e:	b9 9a       	sbi	0x17, 1	; 23
	// PB1 is now an output
	

	// ustawiaj¹æ wartoœæ OCR2 ustawiamy wartoœæ wyjœciowa PWN ( chyba ? )
	OCR1A = 128;
  50:	80 e8       	ldi	r24, 0x80	; 128
  52:	90 e0       	ldi	r25, 0x00	; 0
  54:	9b bd       	out	0x2b, r25	; 43
  56:	8a bd       	out	0x2a, r24	; 42
	// set PWM for 50% duty cycle

	// rejestr kontroluj¹cy prace countera 
	// ustawiamy tryb none-inverting
	// @see https://sites.google.com/site/qeewiki/books/avr-guide/pwm-atmega8
	TCCR1A |= (1 << COM1A1);
  58:	8f b5       	in	r24, 0x2f	; 47
  5a:	80 68       	ori	r24, 0x80	; 128
  5c:	8f bd       	out	0x2f, r24	; 47
	// set none-inverting mode

	// wybieramy tryb pracy Fast PWM / Phase corrected PWM
	TCCR1A |= (1 << WGM11) | (1 << WGM10);
  5e:	8f b5       	in	r24, 0x2f	; 47
  60:	83 60       	ori	r24, 0x03	; 3
  62:	8f bd       	out	0x2f, r24	; 47

	// ustawiam prescaler na 8 , tzn. iteracja countera co ka¿de 8 cykli proca
	//TCCR1B |= (1 << CS11);
	// set prescaler to 8 and starts PWM

	TCCR1B |= (1 << CS10);
  64:	8e b5       	in	r24, 0x2e	; 46
  66:	81 60       	ori	r24, 0x01	; 1
  68:	8e bd       	out	0x2e, r24	; 46
			// @see delay_basic.h
			_delay_loop_2(delay);

		}*/
		
		for(i=0;i<=254;i++)
  6a:	80 e0       	ldi	r24, 0x00	; 0
  6c:	90 e0       	ldi	r25, 0x00	; 0
  6e:	8f 5f       	subi	r24, 0xFF	; 255
  70:	8f 3f       	cpi	r24, 0xFF	; 255
  72:	e9 f7       	brne	.-6      	; 0x6e <main+0x20>
  74:	89 2f       	mov	r24, r25
  76:	fb cf       	rjmp	.-10     	; 0x6e <main+0x20>

00000078 <_exit>:
  78:	f8 94       	cli

0000007a <__stop_program>:
  7a:	ff cf       	rjmp	.-2      	; 0x7a <__stop_program>
