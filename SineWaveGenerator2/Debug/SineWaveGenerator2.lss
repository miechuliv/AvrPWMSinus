
SineWaveGenerator2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000100  00800060  000000a0  00000134  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800160  00800160  00000234  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000000c0  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000085  00000000  00000000  00000344  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000000cc  00000000  00000000  000003c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000498  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000017d  00000000  00000000  000004bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  00000639  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	11 e0       	ldi	r17, 0x01	; 1
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e0 ea       	ldi	r30, 0xA0	; 160
  3a:	f0 e0       	ldi	r31, 0x00	; 0
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a0 36       	cpi	r26, 0x60	; 96
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	21 e0       	ldi	r18, 0x01	; 1
  4a:	a0 e6       	ldi	r26, 0x60	; 96
  4c:	b1 e0       	ldi	r27, 0x01	; 1
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a1 36       	cpi	r26, 0x61	; 97
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	02 d0       	rcall	.+4      	; 0x5e <main>
  5a:	20 c0       	rjmp	.+64     	; 0x9c <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <main>:
ustawiajac wartosc 128 dla rejestru OCR1A otrzymujemy na wyjsciu PWM sygna³ prostokatny o 50% wype³nieniu.                                                                     */
/************************************************************************/
int main(void)
{
	// wyjœciem rejestru OCR1A jest PB1
	DDRB |= (1 << DDB1);
  5e:	b9 9a       	sbi	0x17, 1	; 23
	
	

	// ustawiaj¹æ wartoœæ OCR2 ustawiamy % wype³nienia sygna³u na wyjœciu PWM. % Wype³nienia = (wartosc_przypisana_do_OCR1A / 256) * 100%
	// (128 / 256) * 100% = 50% wype³nienia
	OCR1A = 128;
  60:	80 e8       	ldi	r24, 0x80	; 128
  62:	90 e0       	ldi	r25, 0x00	; 0
  64:	9b bd       	out	0x2b, r25	; 43
  66:	8a bd       	out	0x2a, r24	; 42
	

	// rejestr kontroluj¹cy prace countera 
	// ustawiamy tryb none-inverting: w tyme trybie gdy timer < OCR1A = stan wysoki, gdy timer > OCR1A = stan niski , w trybie inverting jest odwrotnie
	// @see https://sites.google.com/site/qeewiki/books/avr-guide/pwm-atmega8
	TCCR1A |= (1 << COM1A1);
  68:	8f b5       	in	r24, 0x2f	; 47
  6a:	80 68       	ori	r24, 0x80	; 128
  6c:	8f bd       	out	0x2f, r24	; 47
	

	// wybieramy tryb pracy Fast PWM / Phase corrected PWM
	TCCR1A |= (1 << WGM11) | (1 << WGM10);
  6e:	8f b5       	in	r24, 0x2f	; 47
  70:	83 60       	ori	r24, 0x03	; 3
  72:	8f bd       	out	0x2f, r24	; 47
	


	// ustawiam prescaler na 8 , tzn. iteracja countera co ka¿de 8 cykli proca
	TCCR1B |= (1 << CS11);
  74:	8e b5       	in	r24, 0x2e	; 46
  76:	82 60       	ori	r24, 0x02	; 2
  78:	8e bd       	out	0x2e, r24	; 46
	
	
	while(1)
	{
		
		for(i=0;i<256;i++)
  7a:	10 92 60 01 	sts	0x0160, r1
		{
			
			OCR1A = sine[i];
  7e:	e0 91 60 01 	lds	r30, 0x0160
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	e0 5a       	subi	r30, 0xA0	; 160
  86:	ff 4f       	sbci	r31, 0xFF	; 255
  88:	80 81       	ld	r24, Z
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	9b bd       	out	0x2b, r25	; 43
  8e:	8a bd       	out	0x2a, r24	; 42
	
	
	while(1)
	{
		
		for(i=0;i<256;i++)
  90:	80 91 60 01 	lds	r24, 0x0160
  94:	8f 5f       	subi	r24, 0xFF	; 255
  96:	80 93 60 01 	sts	0x0160, r24
  9a:	f1 cf       	rjmp	.-30     	; 0x7e <main+0x20>

0000009c <_exit>:
  9c:	f8 94       	cli

0000009e <__stop_program>:
  9e:	ff cf       	rjmp	.-2      	; 0x9e <__stop_program>
