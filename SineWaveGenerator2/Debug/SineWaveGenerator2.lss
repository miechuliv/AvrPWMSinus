
SineWaveGenerator2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000005a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  0000005a  000000ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000ce  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000020  00000000  00000000  000000fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000007b  00000000  00000000  0000011e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000044  00000000  00000000  00000199  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000004d  00000000  00000000  000001dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000024  00000000  00000000  0000022c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000167  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000010  00000000  00000000  000003b7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	10 c0       	rjmp	.+32     	; 0x56 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:
ustawiajac wartosc 128 dla rejestru OCR1A otrzymujemy na wyjsciu PWM sygna³ prostokatny o 50% wype³nieniu.                                                                     */
/************************************************************************/
int main(void)
{
	// wyjœciem rejestru OCR1A jest PB1
	DDRB |= (1 << DDB1);
  38:	b9 9a       	sbi	0x17, 1	; 23
	
	

	// ustawiaj¹æ wartoœæ OCR2 ustawiamy % wype³nienia sygna³u na wyjœciu PWM. % Wype³nienia = (wartosc_przypisana_do_OCR1A / 256) * 100%
	// (128 / 256) * 100% = 50% wype³nienia
	OCR1A = 128;
  3a:	80 e8       	ldi	r24, 0x80	; 128
  3c:	90 e0       	ldi	r25, 0x00	; 0
  3e:	9b bd       	out	0x2b, r25	; 43
  40:	8a bd       	out	0x2a, r24	; 42
	

	// rejestr kontroluj¹cy prace countera 
	// ustawiamy tryb none-inverting: w tyme trybie gdy timer < OCR1A = stan wysoki, gdy timer > OCR1A = stan niski , w trybie inverting jest odwrotnie
	// @see https://sites.google.com/site/qeewiki/books/avr-guide/pwm-atmega8
	TCCR1A |= (1 << COM1A1);
  42:	8f b5       	in	r24, 0x2f	; 47
  44:	80 68       	ori	r24, 0x80	; 128
  46:	8f bd       	out	0x2f, r24	; 47
	

	// wybieramy tryb pracy Fast PWM / Phase corrected PWM
	TCCR1A |= (1 << WGM11) | (1 << WGM10);
  48:	8f b5       	in	r24, 0x2f	; 47
  4a:	83 60       	ori	r24, 0x03	; 3
  4c:	8f bd       	out	0x2f, r24	; 47
	


	// ustawiam prescaler na 8 , tzn. iteracja countera co ka¿de 8 cykli proca
	TCCR1B |= (1 << CS11);
  4e:	8e b5       	in	r24, 0x2e	; 46
  50:	82 60       	ori	r24, 0x02	; 2
  52:	8e bd       	out	0x2e, r24	; 46
  54:	ff cf       	rjmp	.-2      	; 0x54 <__SREG__+0x15>

00000056 <_exit>:
  56:	f8 94       	cli

00000058 <__stop_program>:
  58:	ff cf       	rjmp	.-2      	; 0x58 <__stop_program>
